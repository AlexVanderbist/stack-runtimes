{{- if isTrue (default "true" .Env.STACK_METRICS_ENABLED) }}

lua_shared_dict nginx_metrics 10M;
lua_shared_dict php_metrics 10M;

{{- $siteName := default "" .Env.STACK_SITE_NAME | quote }}
{{- $hostname := default "" .Env.HOSTNAME | quote }}

init_worker_by_lua_block {
    prometheus_nginx = prometheus.init("nginx_metrics", { prefix = "nginx_" })
    prometheus_php = prometheus.init("php_metrics", { prefix = "php_fpm_" })

    metrics_nginx = {
        http_requests_total = prometheus_nginx:counter(
            "http_requests_total",
            "Number of HTTP requests",
            {"host", "site_name", "status", "cache_status"}
        ),
        http_request_duration_seconds = prometheus_nginx:histogram(
            "http_request_duration_seconds",
            "HTTP request request duration",
            {"host", "site_name"}
        ),
        http_connections = prometheus_nginx:gauge(
            "http_connections",
            "Number of HTTP connections",
            {"host", "site_name", "state"}
        )
    }

    metrics_php = {
        accepted_connections_total = prometheus_php:gauge(
            "accepted_connections_total",
            "Number of accepted connections",
            {"host", "site_name"}
        ),
        listen_queue = prometheus_php:gauge(
            "listen_queue",
            "Number of request in the queue of pending connections",
            {"host", "site_name"}
        ),
        max_listen_queue = prometheus_php:gauge(
            "max_listen_queue",
            "Maximum number of requests in the queue of pending connections since FPM has started",
            {"host", "site_name"}
        ),
        listen_queue_len = prometheus_php:gauge(
            "listen_queue_len",
            "Size of the socket queue of pending connections",
            {"host", "site_name"}
        ),
        idle_processes = prometheus_php:gauge(
            "idle_processes",
            "Number of idle processes",
            {"host", "site_name"}
        ),
        active_processes = prometheus_php:gauge(
            "active_processes",
            "Number of active processes",
            {"host", "site_name"}
        ),
        total_processes = prometheus_php:gauge(
            "total_processes",
            "Number of idle + active processes",
            {"host", "site_name"}
        ),
        max_active_processes = prometheus_php:gauge(
            "max_active_processes",
            "Maximum number of active processes since FPM has started",
            {"host", "site_name"}
        ),
        max_children_reached = prometheus_php:gauge(
            "max_children_reached",
            "Number of times, the process limit has been reached, when pm tries to start more children",
            {"host", "site_name"}
        ),
        slow_requests = prometheus_php:gauge(
            "slow_requests",
            "Number of requests taking a long time to process",
            {"host", "site_name"}
        )
    }
}

log_by_lua_block {
    metrics_nginx["http_requests_total"]:inc(
        1, {
            {{ $hostname }},
            {{ $siteName }},
            ngx.var.status,
            string.lower(ngx.resp.get_headers()["x-cache-fetch"] or "disabled")
        }
    )

    metrics_nginx["http_request_duration_seconds"]:observe(
        tonumber(ngx.var.request_time), {
            {{ $hostname }},
            {{ $siteName }}
        }
    )
}

server {
    listen {{ default "9145" .Env.STACK_METRICS_PORT | atoi }};

    allow 127.0.0.1;
    {{- if (default "10.0.0.0/8" .Env.STACK_METRICS_WHITELIST_CIDR) }}
    allow {{ default "10.0.0.0/8" .Env.STACK_METRICS_WHITELIST_CIDR }};
    {{- end }}
    deny  all;

    location {{ default "/metrics/wordpress" .Env.STACK_METRICS_WORDPRESS_PATH }} {
        proxy_pass http://localhost:{{ default "8080" .Env.PORT }}{{ default "/wp-json/stack/v1/metrics" .Env.STACK_METRICS_WPAPI_ENDPOINT }};
    }

    location {{ default "/metrics/nginx" .Env.STACK_METRICS_NGINX_PATH }} {
        content_by_lua_block {
            metrics_nginx["http_connections"]:set(
                ngx.var.connections_reading, {
                    {{ $hostname }},
                    {{ $siteName }},
                    "reading"
                }
            )
            metrics_nginx["http_connections"]:set(
                ngx.var.connections_waiting, {
                    {{ $hostname }},
                    {{ $siteName }},
                    "waiting"
                }
            )
            metrics_nginx["http_connections"]:set(
                ngx.var.connections_writing, {
                    {{ $hostname }},
                    {{ $siteName }},
                    "writing"
                }
            )
            prometheus_nginx:collect()
        }
    }

    location {{ default "/metrics/php-fpm" .Env.STACK_METRICS_PHP_PATH }} {
    {{- if ne "off" ( default "/-/php-status" .Env.PHP_STATUS_PATH ) }}
        content_by_lua_block {
            local httpc = http.new()

            local stats_url = "http://127.0.0.1:"
              .. {{ default "8080" .Env.PORT | quote }}
              .. {{ default "/-/php-status" .Env.PHP_STATUS_PATH | quote }}
              .. "?json"

            local res, err = httpc:request_uri(stats_url, { method = "GET" })

            if not res or res.status ~= 200 then
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                ngx.say("Error: Failed to read FPM status at " .. stats_url .. " - " .. err)
                ngx.log(ngx.ERR, "Failed to read FPM status at " .. stats_url .. " - " .. err)
                return
            end

            local fpm_stats = cjson.decode(res.body)

            if fpm_stats then
                metrics_php["accepted_connections_total"]:set(
                    fpm_stats["accepted conn"], {
                        {{ $hostname }},
                        {{ $siteName }}
                    }
                )
                metrics_php["listen_queue"]:set(
                    fpm_stats["listen queue"], {
                        {{ $hostname }},
                        {{ $siteName }}
                    }
                )
                metrics_php["max_listen_queue"]:set(
                    fpm_stats["max listen queue"], {
                        {{ $hostname }},
                        {{ $siteName }}
                    }
                )
                metrics_php["listen_queue_len"]:set(
                    fpm_stats["listen queue len"], {
                        {{ $hostname }},
                        {{ $siteName }}
                    }
                )
                metrics_php["idle_processes"]:set(
                    fpm_stats["idle processes"], {
                        {{ $hostname }},
                        {{ $siteName }}
                    }
                )
                metrics_php["active_processes"]:set(
                    fpm_stats["active processes"], {
                        {{ $hostname }},
                        {{ $siteName }}
                    }
                )
                metrics_php["total_processes"]:set(
                    fpm_stats["total processes"], {
                        {{ $hostname }},
                        {{ $siteName }}
                    }
                )
                metrics_php["max_active_processes"]:set(
                    fpm_stats["max active processes"], {
                        {{ $hostname }},
                        {{ $siteName }}
                    }
                )
                metrics_php["max_children_reached"]:set(
                    fpm_stats["max children reached"], {
                        {{ $hostname }},
                        {{ $siteName }}
                    }
                )
                metrics_php["slow_requests"]:set(
                    fpm_stats["slow requests"], {
                        {{ $hostname }},
                        {{ $siteName }}
                    }
                )

                prometheus_php:collect()
            else
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                ngx.say("Error: Failed to parse FPM status at " .. stats_url)
                ngx.log(ngx.STDERR, "Failed to parse FPM status at " .. stats_url)
                return
            end
        }
    {{- else }}
        return 404 'Error: FPM status page is disabled';
    {{- end }}
    }
}

{{- end }}
