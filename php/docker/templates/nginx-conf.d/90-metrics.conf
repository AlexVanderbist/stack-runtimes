{{- $metricsEnabled := default "true" .Env.STACK_METRICS_ENABLED }}

{{- if isTrue $metricsEnabled }}

lua_shared_dict prometheus_metrics 10M;

{{- $siteName := default "" .Env.STACK_SITE_NAME | quote }}

init_worker_by_lua_block {
    prometheus = require("prometheus").init("prometheus_metrics")
    metric_requests = prometheus:counter(
        "nginx_http_requests_total",
        "Number of HTTP requests",
        {"host_name", "site_name", "status", "cache_status"}
    )
    metric_request_time = prometheus:histogram(
        "nginx_http_request_duration_seconds",
        "HTTP request request duration",
        {"host_name", "site_name"}
    )
    metric_connections = prometheus:gauge(
        "nginx_http_connections",
        "Number of HTTP connections",
        {"host_name", "site_name", "state"}
    )
}

log_by_lua_block {
    metric_requests:inc(
        1, {
            ngx.var.server_name,
            {{ $siteName }},
            ngx.var.status,
            string.lower(ngx.resp.get_headers()["x-cache-fetch"] or "disabled")
        }
    )

    metric_request_time:observe(
        tonumber(ngx.var.request_time), {
            ngx.var.server_name,
            {{ $siteName }}
        }
    )
}

server {
    listen {{ default "9145" .Env.STACK_METRICS_PORT | atoi }};

    allow 127.0.0.1;
    {{- if (default "10.0.0.0/8" .Env.STACK_METRICS_WHITELIST_CIDR) }}
    allow {{ default "10.0.0.0/8" .Env.STACK_METRICS_WHITELIST_CIDR }};
    {{- end }}
    deny  all;

    location {{ default "/metrics/wordpress" .Env.STACK_METRICS_WORDPRESS_PATH }} {
        proxy_pass http://localhost:{{ default "8080" .Env.PORT }}{{ default "/wp-json/stack/v1/metrics" .Env.STACK_METRICS_WPAPI_ENDPOINT }};
    }

    location {{ default "/metrics/nginx" .Env.STACK_METRICS_NGINX_PATH }} {
        content_by_lua_block {
            metric_connections:set(
                ngx.var.connections_reading, {
                    ngx.var.server_name,
                    {{ $siteName }},
                    "reading"
                }
            )
            metric_connections:set(
                ngx.var.connections_waiting, {
                    ngx.var.server_name,
                    {{ $siteName }},
                    "waiting"
                }
            )
            metric_connections:set(
                ngx.var.connections_writing, {
                    ngx.var.server_name,
                    {{ $siteName }},
                    "writing"
                }
            )
            prometheus:collect()
        }
    }
}

{{- end }}
